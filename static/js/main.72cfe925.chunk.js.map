{"version":3,"sources":["comonents/TransactionTable.tsx","comonents/ControlPanel.tsx","store/actionCreators.ts","store/actionTypes.ts","comonents/App.tsx","store/reducer.ts","index.tsx"],"names":["StyledTableRow","withStyles","theme","createStyles","root","backgroundColor","palette","action","hover","TableRow","TransactionTable","transactions","useSelector","state","shallowEqual","transactionsSum","reduce","sum","current","amount","Typography","color","TableContainer","component","Paper","Table","aria-label","style","width","TableHead","TableCell","align","TableBody","map","transaction","i","key","scope","fromAddr","toAddr","useStyles","makeStyles","buttonGroup","justifyContent","display","ControlPanel","dispatch","useDispatch","ws","WebSocket","classes","addTrans","useCallback","type","addTransaction","clearTrans","clearTransactions","useEffect","onopen","console","log","onmessage","evt","message","JSON","parse","data","fromAddresses","x","inputs","input","prev_out","addr","toAddresses","out","output","value","onclose","ButtonGroup","className","Button","onClick","send","stringify","error","App","initialState","reducer","newTransaction","concat","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72cfe925.chunk.js","sourcesContent":["import React from 'react';\nimport {shallowEqual, useSelector} from \"react-redux\";\n\nimport {withStyles, Theme, createStyles} from '@material-ui/core/styles';\nimport {\n  Table,\n  Paper,\n  TableRow,\n  TableCell,\n  TableHead,\n  TableBody,\n  Typography,\n  TableContainer,\n} from '@material-ui/core';\n\n\nconst StyledTableRow = withStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n      },\n    },\n  }),\n)(TableRow);\n\n// TODO: virtualized table?\nexport default function TransactionTable() {\n  const transactions: readonly ITransaction[] = useSelector(\n    (state: TransactionState) => state.transactions,\n    shallowEqual,\n  );\n\n  const transactionsSum: number = useSelector(\n    (state: TransactionState) => state.transactions.reduce(\n      (sum: number, current: ITransaction) => sum + current.amount, 0\n    )\n  );\n\n  return (\n    <div>\n      <Typography color=\"textSecondary\">Общая сумма: {transactionsSum}BTC</Typography>\n      <TableContainer component={Paper}>\n        <Table aria-label='Transactions table'>\n          <colgroup>\n            <col style={{width: '40%'}}/>\n            <col style={{width: '40%'}}/>\n            <col style={{width: '20%'}}/>\n          </colgroup>\n          <TableHead>\n            <TableRow>\n              <TableCell align='left'>От кого</TableCell>\n              <TableCell align='left'>Кому</TableCell>\n              <TableCell align='left'>Сумма</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {transactions.map((transaction: ITransaction, i: number) => (\n              <StyledTableRow key={i}>\n                <TableCell component='th' scope='row' align='left'>{transaction.fromAddr}</TableCell>\n                <TableCell align='left'>{transaction.toAddr}</TableCell>\n                <TableCell align='left'>{transaction.amount}BTC</TableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n\n","import {Dispatch} from \"redux\";\nimport {useDispatch} from \"react-redux\";\nimport React, {useEffect, useCallback} from 'react';\n\nimport {Button, ButtonGroup} from '@material-ui/core';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\n\nimport {addTransaction, clearTransactions} from '../store/actionCreators';\n\nconst useStyles = makeStyles({\n  buttonGroup: {\n    justifyContent: 'center',\n    display: 'flex',\n  }\n});\n\nconst socket_addr = 'wss://ws.blockchain.info/inv';\n\nexport default function ControlPanel() {\n  const dispatch: Dispatch<any> = useDispatch();\n  const ws = new WebSocket(socket_addr);\n\n  const classes = useStyles();\n\n  const addTrans = useCallback(\n    (transaction: ITransaction) => dispatch(addTransaction(transaction)),\n    [dispatch]\n  );\n\n  const clearTrans = useCallback(\n    () => dispatch(clearTransactions()),\n    [dispatch]\n  );\n\n  useEffect(() => {\n    ws.onopen = () => {\n      console.log('connected');\n    };\n\n    ws.onmessage = evt => {\n      const message = JSON.parse(evt.data);\n\n      // extract the needed data from the message\n      const fromAddresses = message.x.inputs.map((input: any) => `${input.prev_out.addr}\\n`);\n      const toAddresses = message.x.out.map((output: any) => `${output.addr}\\n`);\n      const amount = message.x.out.reduce((sum: number, out: any) => sum + out.value, 0);\n\n      const transaction = {\n        fromAddr: fromAddresses,\n        toAddr: toAddresses,\n        amount: amount / 100000000, // divide to get BTC from satoshi\n      };\n      addTrans(transaction);\n    };\n\n    ws.onclose = () => {\n      console.log('disconnected');\n    };\n  });\n\n  function subscribe() {\n    const data = {'op': 'unconfirmed_sub'};\n    try {\n      ws.send(JSON.stringify(data));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  function unsubscribe() {\n    const data = {'op': 'unconfirmed_unsub'};\n    try {\n      ws.send(JSON.stringify(data));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <div>\n      <ButtonGroup className={classes.buttonGroup} color='primary' aria-label='outlined primary button group'>\n        <Button onClick={subscribe}>Запуск</Button>\n        <Button onClick={unsubscribe}>Остановка</Button>\n        <Button onClick={clearTrans}>Сброс</Button>\n      </ButtonGroup>\n    </div>\n  );\n}\n","import * as actionTypes from \"./actionTypes\";\n\nexport function addTransaction(transaction: ITransaction) {\n  const action: TransactionAction = {\n    type: actionTypes.ADD_TRANSACTION,\n    transaction: transaction,\n  };\n\n  return (dispatch: DispatchType) => {\n    dispatch(action);\n  };\n}\n\nexport function clearTransactions() {\n  const action: TransactionAction = {\n    type: actionTypes.CLEAR_TRANSACTIONS,\n    transaction: {} as ITransaction,\n  };\n\n  return (dispatch: DispatchType) => {\n    dispatch(action);\n  };\n}\n","export const ADD_TRANSACTION = 'ADD_TRANSACTION'\nexport const CLEAR_TRANSACTIONS = 'CLEAR_TRANSACTIONS'","import React from 'react';\nimport TransactionTable from './TransactionTable';\nimport ControlPanel from './ControlPanel';\n\nfunction App() {\n  return (\n    <div>\n      <ControlPanel/>\n      <TransactionTable/>\n    </div>\n  )\n}\n\nexport default App;\n","import * as actionTypes from \"./actionTypes\";\n\nconst initialState: TransactionState = {\n  transactions: [],\n};\n\nconst reducer = (\n  state: TransactionState = initialState,\n  action: TransactionAction\n): TransactionState => {\n  switch (action.type) {\n    case actionTypes.ADD_TRANSACTION:\n      const newTransaction: ITransaction = {\n        fromAddr: action.transaction.fromAddr,\n        toAddr: action.transaction.toAddr,\n        amount: action.transaction.amount,\n      };\n      return {\n        ...state,\n        // add new transaction to the beginning\n        transactions: [newTransaction].concat(state.transactions),\n      };\n    case actionTypes.CLEAR_TRANSACTIONS:\n      return {\n        ...state,\n        transactions: [],\n      };\n  }\n  return state;\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport thunk from \"redux-thunk\";\nimport {Provider} from \"react-redux\";\nimport {createStore, applyMiddleware, Store} from \"redux\";\n\nimport App from './comonents/App';\nimport reducer from \"./store/reducer\";\n\nconst store: Store<TransactionState, TransactionAction> & {\n  dispatch: DispatchType\n} = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App/>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}